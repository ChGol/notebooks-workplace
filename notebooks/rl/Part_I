{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "[SOLVED] Crash Course in Reinforcement Learning - Part I",
      "provenance": [],
      "collapsed_sections": [
        "Gw3P1oFTOlnF"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gw3P1oFTOlnF"
      },
      "source": [
        "# Setup\n",
        "Run below cells to setup your enviroment "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S-4YPGE9O9mH"
      },
      "source": [
        "!pip install gym[Box2D] pyvirtualdisplay pyglet > /dev/null 2>&1\n",
        "!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_jMNwYlIHTep"
      },
      "source": [
        "import gym\n",
        "from gym import logger as gymlogger\n",
        "from gym.wrappers import Monitor\n",
        "gymlogger.set_level(40) #error only\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams['figure.figsize'] = (10.0, 8.0)\n",
        "import math\n",
        "import glob\n",
        "import io\n",
        "import base64\n",
        "from IPython.display import HTML\n",
        "\n",
        "from typing import List, Tuple\n",
        "\n",
        "import torch\n",
        "from torch import nn\n",
        "import torch.nn.functional as F\n",
        "from collections import deque\n",
        "\n",
        "from IPython import display as ipythondisplay\n",
        "from IPython.display import display, update_display, clear_output\n",
        "from time import sleep\n",
        "\n",
        "from pyvirtualdisplay import Display\n",
        "xdisplay = Display(visible=0, size=(1300, 900), backend=\"xvfb\")\n",
        "xdisplay.start()\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "Utility functions to enable video recording of gym environment and displaying it\n",
        "To enable video, just do \"env = wrap_env(env)\"\"\n",
        "\"\"\"\n",
        "\n",
        "class DoneWrapper(gym.Wrapper):\n",
        "\n",
        "  def step(self, action):\n",
        "    observation, reward, done, info = self.env.step(action) \n",
        "    return observation, reward, False, info\n",
        "      \n",
        "\n",
        "def show_video():\n",
        "  mp4list = glob.glob('video/*.mp4')\n",
        "  if len(mp4list) > 0:\n",
        "    mp4 = mp4list[0]\n",
        "    video = io.open(mp4, 'r+b').read()\n",
        "    encoded = base64.b64encode(video)\n",
        "    ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay \n",
        "                loop controls style=\"height: 400px;\">\n",
        "                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n",
        "             </video>'''.format(encoded.decode('ascii'))))\n",
        "  else: \n",
        "    print(\"Could not find video\")\n",
        "    \n",
        "    \n",
        "def wrap_env(env, done=True):\n",
        "  if not done:\n",
        "    env = DoneWrapper(env)\n",
        "  env = Monitor(env, './video', force=True, mode='evaluation')\n",
        "  return env\n",
        "\n",
        "\n",
        "def print_ansi(screen, display_id='42', wait=0.5):\n",
        "    clear_output(wait=True)\n",
        "    update_display(print(screen.getvalue()), display_id=display_id)\n",
        "    sleep(wait)\n",
        "\n",
        "\n",
        "def plot(img):\n",
        "  fig = plt.figure(figsize=(8,6))\n",
        "  ax = fig.add_subplot(111)\n",
        "  ax.imshow(img)\n",
        "  ax.set_xticks([])\n",
        "  ax.set_yticks([])"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k1U1clC6HTeu"
      },
      "source": [
        "# Part 1. The Agent and The Environment\n",
        "Here we are going to familiarize ourselves with basic Reinforcement Learning concepts: environments and agent. \n",
        "\n",
        "Through the whole workshop we will be using the `gym` package for our environment, here's an example of a classic control task."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "c3f7a539-0438-4c5e-8974-31dbfb2fb63c",
        "id": "g0mcOMT_HTew",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        }
      },
      "source": [
        "import gym\n",
        "\n",
        "# create the environemnt\n",
        "env = gym.make(\"CartPole-v1\")\n",
        "# reset the env and initilize it\n",
        "env.reset()\n",
        "# plot the visualisation\n",
        "plot(env.render(mode='rgb_array'))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "c80fdbd4-cfc5-41d8-8026-f20c53a312fc",
        "id": "hPOABUyaHTez",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# state/observation space\n",
        "print(env.observation_space)\n",
        "print(\"max:\", env.observation_space.high)\n",
        "print(\"min:\", env.observation_space.low)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Box(-3.4028234663852886e+38, 3.4028234663852886e+38, (4,), float32)\n",
            "max: [4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38]\n",
            "min: [-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UP9Iv5EARquC"
      },
      "source": [
        "**Question:** Can you guess what are those four numbers?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "92400979-4edf-4b5a-9044-010e8f8959d9",
        "id": "VX-JjUrGHTe2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# action space\n",
        "print(env.action_space)\n",
        "print(\"random action:\", env.action_space.sample())"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Discrete(2)\n",
            "random action: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PsOEU1pFHTe7"
      },
      "source": [
        "**Question:** Again, can you guess what are those to actions?\n",
        "\n",
        "Let's see how do we (or specifically the agent) can interact with the environment."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "22abc3e7-d23b-46e1-cba1-3949faac3623",
        "id": "IA96qLRAHTe9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# set the limit on steps taken\n",
        "max_steps = 200\n",
        "\n",
        "# create the environment again\n",
        "env = wrap_env(gym.make(\"CartPole-v1\"), done=False)\n",
        "# reset it\n",
        "env.reset()\n",
        "# plot\n",
        "env.render()\n",
        "\n",
        "# interact with the environemnt \n",
        "for i in range(max_steps):\n",
        "  \n",
        "    # sample a random action\n",
        "    action = env.action_space.sample()\n",
        "\n",
        "    # act with the sampled action\n",
        "    observation, reward, done, info = env.step(action) \n",
        "\n",
        "    # plot\n",
        "    env.render()\n",
        "  \n",
        "# close the env\n",
        "env.close()\n",
        "# visualise the interaction\n",
        "show_video()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ChCKYSc1HTfC"
      },
      "source": [
        "**Mini-exercise:** Change random action to a constant one."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "15763206-4f56-471f-98a1-6af3b59e6d22",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "3YfF1pxHRcYu"
      },
      "source": [
        "# Constant Action\n",
        "# set the limit on steps taken\n",
        "max_steps = 10\n",
        "\n",
        "# create the environment again\n",
        "env = wrap_env(gym.make(\"CartPole-v1\"), done=False)\n",
        "# reset it\n",
        "env.reset()\n",
        "# plot\n",
        "env.render()\n",
        "\n",
        "# interact with the environemnt \n",
        "for i in range(max_steps):\n",
        "  \n",
        "    # sample a random action\n",
        "    action = 1\n",
        "\n",
        "    # act with the sampled action\n",
        "    observation, reward, done, info = env.step(action) \n",
        "\n",
        "    # plot\n",
        "    env.render()\n",
        "  \n",
        "# close the env\n",
        "env.close()\n",
        "# visualise the interaction\n",
        "show_video()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,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\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DeDQHLV7HTfD"
      },
      "source": [
        "## Exercise: Manual control on a more complicated environment.\n",
        "\n",
        "Try to \"manually\" solve the moon lander problem\n",
        "\n",
        "State space representation:\n",
        "```\n",
        "[x position,   \n",
        " y position,\n",
        " x velocity,\n",
        " y velocity,\n",
        " lander angle,\n",
        " angular velocity,\n",
        " ??,\n",
        " ??]\n",
        "``` \n",
        "\n",
        "Action space representation:\n",
        "```\n",
        "[no operation\n",
        "left engine,\n",
        "main (bottom) engine,\n",
        "right engine]\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "85e3c5a3-f641-478e-a238-0dd2f21ef3c4",
        "id": "3E2GXEAsHTfE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# create the environment (again)\n",
        "env = wrap_env(gym.make(\"LunarLander-v2\"))\n",
        "# reset\n",
        "observation = env.reset()\n",
        "# plot\n",
        "env.render()\n",
        "\n",
        "# interact with the environemnt \n",
        "while True:\n",
        "\n",
        "    # change the constant action here to some heuristic \n",
        "    # base on the state\n",
        "    action: int = 2\n",
        "\n",
        "    # act with the choosen action\n",
        "    observation, reward, done, info = env.step(action) \n",
        "\n",
        "    # plotting\n",
        "    env.render()\n",
        "\n",
        "    # break the loop on game end\n",
        "    if done:\n",
        "        break\n",
        "  \n",
        "env.close()\n",
        "show_video()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tUKt2EUEHTfH"
      },
      "source": [
        "## Exercise: Build a class for your Moon Lander policy.\n",
        "\n",
        "We would like to have some abstraction for our Policies, move your solution to the class skeleton below. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lvl8DVlCHTfI"
      },
      "source": [
        "import time\n",
        "\n",
        "class ManualPolicy:\n",
        "\n",
        "  def sample(self, obs: np.ndarray):\n",
        "      \"\"\"Pick an action based on the current state\"\"\"\n",
        "\n",
        "      timestamp = time.time()\n",
        "      if timestamp % 2 == 0:\n",
        "        action = 2\n",
        "      else:\n",
        "        action = 0\n",
        "      \n",
        "      return action"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7hFzepUhHTfM"
      },
      "source": [
        "Use your new policy class in the function below.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZkFC2btxHTfN"
      },
      "source": [
        "def visualize(env, policy):\n",
        "    \"\"\"Run the provided policy on the environment\"\"\"\n",
        "\n",
        "    env = wrap_env(env)\n",
        "    obs = env.reset()\n",
        "    done = False\n",
        "    \n",
        "    while not done:\n",
        "        action = policy.sample(obs)\n",
        "        obs, reward, done, _ = env.step(action)\n",
        "        env.render()\n",
        "\n",
        "    env.close()\n",
        "    show_video()"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "a76dcc92-bfdc-427a-ce25-fd8918da722f",
        "id": "hTBs0mm8HTfP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "# your policy\n",
        "policy = ManualPolicy()\n",
        "\n",
        "visualize(env, policy)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQWzWkSkHTfS"
      },
      "source": [
        "## Exercise: Random Policy\n",
        "We would like to compare our policy to a *random* agent, let's implement another policy class, this time a more generic one that can work for various environments.\n",
        "\n",
        "Implement the `RandomPolicy` class using methods from the PyTorch package.\n",
        "\n",
        "**Hint:** For random sampling you can use [`torch.multinomial`](https://pytorch.org/docs/stable/torch.html#torch.multinomial) function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "si7rfe_YHTfT"
      },
      "source": [
        "import torch\n",
        "\n",
        "class RandomPolicy:\n",
        "    \"\"\"Policy that takes uniformly random actions\"\"\"\n",
        "\n",
        "    def __init__(self, action_dim: int):\n",
        "        # save action dimensionality\n",
        "        self.action_dim = action_dim\n",
        "\n",
        "    def probs(self):\n",
        "        # create a tensor with uniform probability for each action\n",
        "        # make sure that the returned type is torch.float\n",
        "\n",
        "        probs = [1 / self.action_dim] * self.action_dim\n",
        "        return torch.tensor(probs, dtype=torch.float32)\n",
        "\n",
        "    def sample(self, obs: np.ndarray):\n",
        "        # sample from the prepared probability vector\n",
        "        # * here you can disregard the `obs` parameterm as our random action is \n",
        "        #   independent of the observation\n",
        "        # * because the suggested sampling method returns a tensor, you may need\n",
        "        #   to use the `.item()` method on the returned tensor to get an int  \n",
        "        probs = self.probs()\n",
        "        action = torch.multinomial(probs, num_samples=1).item()\n",
        "        return action\n"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZ6V68lHHTfW"
      },
      "source": [
        "Test the Random Policy."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "06c267f9-489f-4ec8-99b0-ccdabc13a670",
        "id": "ktTRga5aHTfX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "# your policy\n",
        "policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "\n",
        "visualize(env, policy)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dsWfOz4_HTfa"
      },
      "source": [
        "## Exercise: Gathering Trajectories\n",
        "To compare your Policy to a Random one we need to many *episodes* to get a better picture of how they perform. Here we will gather many trajectories to later compare the performance of the models.\n",
        "\n",
        "\n",
        "Implement the missing code in the function below to gather trajectories, a single element of a trajectory should be a tuple consisting of:\n",
        "`[state, action_taken, reward, done_flag]`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9qTfnx_VHTfc"
      },
      "source": [
        "def gather_trajectories(env: gym.Env, policy, num_trajs: int = 10):\n",
        "    \"\"\"Gather `num_trajs` trajectories by interacting with the environment using the given policy.\"\"\"\n",
        "    \n",
        "    # prepare a list for the trajectories\n",
        "    history = []\n",
        "    \n",
        "    for traj_idx in range(num_trajs):\n",
        "        obs = env.reset()\n",
        "        done = False\n",
        "        current_traj = []\n",
        "        while not done:\n",
        "            \n",
        "            # sample an action from the policy\n",
        "            action = policy.sample(obs) # ???\n",
        "            # feed it into the environment\n",
        "            next_obs, reward, done, _ = env.step(action)\n",
        "            \n",
        "            # save into the history\n",
        "            current_traj += [(obs, action, reward)]\n",
        "\n",
        "            obs = next_obs\n",
        "        history += [current_traj]\n",
        "        \n",
        "    return history"
      ],
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aC2cg6YjHTfe"
      },
      "source": [
        "env = gym.make(\"LunarLander-v2\")\n",
        "\n",
        "manual_policy = ManualPolicy()\n",
        "random_policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "\n",
        "# this may take a few seconds\n",
        "manual_history = gather_trajectories(env, manual_policy)\n",
        "random_history = gather_trajectories(env, random_policy)"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0w43UBcoHTfh"
      },
      "source": [
        "## Exercise: Processing Trajectories\n",
        "\n",
        "Now that we have the episode records we can process the trajectories to get some statistics, but we need one more thing. We will compare our policies on the sum of rewards and the end of each episode, called *return*. Later we will need a return for each step of the interaction, so let's implement it right now. As a remainder, a step return is defined as:\n",
        "\n",
        "$$ R_t = \\sum_{j=t}^{T} r_j$$\n",
        "\n",
        "and the episode return with the episode trajectory $\\tau$ is simply:\n",
        "\n",
        "$$ R(\\tau) =  \\sum_{j=1}^{T} r_j $$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ewF-7AdyHTfi"
      },
      "source": [
        "def calculate_return(rewards: List[float]) -> Tuple[float, List[float]]:\n",
        "    \"\"\"Calulate episode and step returns\"\"\"\n",
        "    # calculate the sum of rewards from the episode\n",
        "    rewards = np.array(rewards)\n",
        "    episode_return = np.sum(rewards)\n",
        "    \n",
        "    # prepare a list for the step returns\n",
        "    step_returns = []\n",
        "\n",
        "    # calculate discounted return for each step\n",
        "    # hint: it's easier to go backwards\n",
        "    step_returns = [rewards[-1]]\n",
        "    for reward in reversed(rewards[:-1]):\n",
        "        last_return = step_returns[-1]\n",
        "        step_returns += [reward + last_return]\n",
        "    \n",
        "    step_returns.reverse()\n",
        "\n",
        "    return episode_return, step_returns"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y4umKZrZHTfl"
      },
      "source": [
        "With that function ready we can use it to process our history. Implement the `process_trajectories` function, don't forget to use the `calculate_return` function that you've just implemented."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zwm1U_a2HTfo"
      },
      "source": [
        "def process_trajectories(history: List):\n",
        "    \"\"\"Process gathered trajectories into tensors and calculate returns\"\"\"\n",
        "    # prepare containers for each element\n",
        "    obs_array = []\n",
        "    action_array = []\n",
        "    return_array = []\n",
        "    episode_returns = []\n",
        "    \n",
        "    # loop over the whole history\n",
        "    rewards = []\n",
        "    for traj_idx, traj in enumerate(history):\n",
        "        # unpack the elements\n",
        "        traj_obs, traj_actions, traj_rewards = list(zip(*traj))\n",
        "\n",
        "        # process the episode - calculate episode and step returns\n",
        "        # ???\n",
        "        episode_return, step_returns = calculate_return(traj_rewards)\n",
        "        \n",
        "        episode_returns += [episode_return]\n",
        "        obs_array += traj_obs\n",
        "        action_array += traj_actions\n",
        "        return_array += step_returns\n",
        "\n",
        "    # cast out data to tensors (will be useful later)     \n",
        "    obs_array = torch.tensor(obs_array, dtype=torch.float32)\n",
        "    action_array = torch.tensor(action_array, dtype=torch.float32)\n",
        "    return_array = torch.tensor(return_array, dtype=torch.float32)\n",
        "    episode_returns = torch.tensor(episode_returns, dtype=torch.float32)\n",
        "    \n",
        "    return obs_array, action_array, return_array, episode_returns"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QNB4QJeqHTft"
      },
      "source": [
        "With all that we can compare your policy to the random one, will plot here the returns for each consecutive episode."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "4d5cfaac-78a1-41a5-c10d-cd9a06baec62",
        "id": "9qBFVtZZHTfu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        }
      },
      "source": [
        "manual_stats = process_trajectories(manual_history)\n",
        "random_stats = process_trajectories(random_history)\n",
        "\n",
        "manual_returns = manual_stats[-1]\n",
        "random_returns = random_stats[-1]\n",
        "\n",
        "plt.boxplot([manual_returns.numpy(), random_returns.numpy()], labels=['manual', 'random'], sym=\"\")\n",
        "\n",
        "print(f\"Average manual policy episode return: {manual_returns.mean():.3f}\")\n",
        "print(f\"Average random policy episode return: {random_returns.mean():.3f}\")"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:25: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average manual policy episode return: -136.929\n",
            "Average random policy episode return: -201.330\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KwtjJq6nHTfz"
      },
      "source": [
        "## Free Play\n",
        "If you want to try to write a better policy here's the whole code in one place."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "f92a3b43-b14c-49f9-82b1-80ffbd6bd332",
        "id": "dUSV3iQ4HTf0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        }
      },
      "source": [
        "class ManualPolicy:\n",
        "\n",
        "  def sample(self, obs: np.ndarray):\n",
        "      \"\"\"Pick an action based on the current state\"\"\"\n",
        "\n",
        "      # your code here\n",
        "      action = 0\n",
        "      \n",
        "      return action\n",
        "\n",
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "\n",
        "# random policy\n",
        "policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "# your policy\n",
        "policy = ManualPolicy()\n",
        "\n",
        "# gather trajectories\n",
        "manual_history = gather_trajectories(env, manual_policy)\n",
        "random_history = gather_trajectories(env, random_policy)\n",
        "\n",
        "# process trajectories\n",
        "manual_stats = process_trajectories(manual_history)\n",
        "random_stats = process_trajectories(random_history)\n",
        "\n",
        "# get episode returns\n",
        "manual_returns = manual_stats[-1]\n",
        "random_returns = random_stats[-1]\n",
        "\n",
        "# visualize\n",
        "plt.boxplot([manual_returns.numpy(), random_returns.numpy()], labels=['manual', 'random'], sym=\"\")\n",
        "\n",
        "print(f\"Average manual policy episode return: {manual_returns.mean():.3f}\")\n",
        "print(f\"Average random policy episode return: {random_returns.mean():.3f}\")\n"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average manual policy episode return: -151.788\n",
            "Average random policy episode return: -188.412\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAl4AAAHSCAYAAAA9u8W4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWa0lEQVR4nO3dfYxl9X3f8c+3UNPWEvZSUI1Z1pBm7RQIJWFEiBS7qYwCREmw3aTBrWqTSN7QmD+qtrLsIhmw5TayG1XyY7R1kWuJijqxMcg25SFqYycpsQdDeHDAWYMpIFStvSuj1hYp5tc/5li53uwyC3fme+fOvl7SEff+zsP9DUJ33pxz7p0aYwQAgM331xY9AQCAY4XwAgBoIrwAAJoILwCAJsILAKCJ8AIAaHL8oidwtE4++eRxxhlnLHoaAADruvvuu781xjjl0PGlCa8zzjgjq6uri54GAMC6quqxw4271AgA0ER4AQA0EV4AAE2EFwBAk00Lr6q6tqqerKp7p+XnZ9a9q6r2VdXDVXXxZs0BAGAr2exPNf6HMca/nx2oqrOSXJ7k7CSvTHJnVb16jPH9TZ4LAMBCLeJS42VJbhxjPDPGeDTJviQXLGAeAACtNju8rqqq+6rq+qraMY2dluTxmW2emMb+iqraU1WrVbW6f//+TZ4qAMDmmiu8qurOqnrgMMtlST6W5O8mOS/JU0l++4Uef4yxd4yxMsZYOeWUv/LlrwAAS2Wue7zGGBcdzXZV9R+TfG56+mSS02dW75zGAAC2tc38VOOpM0/fmOSB6fEtSS6vqhOq6swku5N8ebPmAQCwVWzmpxrfX1XnJRlJvpnkN5JkjPFgVX0qydeSPJvk7T7RCAAcCzYtvMYY/+x51r0vyfs267UBALYi31wPANBEeAEANBFeAABNhBcAQBPhBQDQZLP/SDYAbGlVtSnHHWNsynFZbsILgGPa0QZSVYkp5uZSIwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANJkrvKrqV6rqwap6rqpWDln3rqraV1UPV9XFM+OXTGP7quqd87w+AMAymfeM1wNJ3pTki7ODVXVWksuTnJ3kkiQfrarjquq4JB9JcmmSs5K8edoWAGDbO36enccYf5YkVXXoqsuS3DjGeCbJo1W1L8kF07p9Y4xHpv1unLb92jzzAABYBpt1j9dpSR6fef7ENHakcQCAbW/dM15VdWeSVxxm1dVjjJs3fko/9Np7kuxJkl27dm3mSwEAbLp1w2uMcdGLOO6TSU6feb5zGsvzjB/utfcm2ZskKysr40XMAwBgy9isS423JLm8qk6oqjOT7E7y5SRfSbK7qs6sqpdk7Qb8WzZpDgAAW8pcN9dX1RuTfCjJKUk+X1X3jjEuHmM8WFWfytpN888mefsY4/vTPlcluS3JcUmuH2M8ONdPAACwJGqM5biCt7KyMlZXVxc9DQCOUVWVZfmdyeJV1d1jjJVDx31zPQBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAECTuf5kEABsRSeddFIOHjy44cetqg093o4dO3LgwIENPSZbm/ACYNs5ePDgUvx5n40OObY+lxoBAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCbCCwCgifACAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJscvegJwtKpqU447xtiU4wLAoYQXS+NoA6mqxBQAW5JLjQAATYQXAEAT4QUA0MQ9XizUSSedlIMHD274cTf6RvwdO3bkwIEDG3pMAI49wouFOnjw4FLcCL9Zn6gE4NjiUiMAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE99cz0KNa05Mrn3ZoqexrnHNiYueAgDbgPBioeq6p5fmTwaNaxc9CwCWnUuNAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE38yiIWrqkVPYV07duxY9BQA2AaEFwu1GX+nsaqW4u8/AnDsEV4sjRdyZuyFbCvSAOgivFgaAgmAZefmegCAJnOFV1X9SlU9WFXPVdXKzPgZVfW9qrp3Wn5nZt35VXV/Ve2rqg/WMtxZDQCwAeY94/VAkjcl+eJh1n1jjHHetFw5M/6xJG9LsntaLplzDgAAS2Gu8Bpj/NkY4+Gj3b6qTk1y4hjjrrF2w84nk7xhnjkAACyLzbzH68yquqeq/qCqXjuNnZbkiZltnpjGAAC2vXU/1VhVdyZ5xWFWXT3GuPkIuz2VZNcY49tVdX6Sz1bV2S90clW1J8meJNm1a9cL3R0AYEtZN7zGGBe90IOOMZ5J8sz0+O6q+kaSVyd5MsnOmU13TmNHOs7eJHuTZGVlxXcJAABLbVMuNVbVKVV13PT4R7J2E/0jY4ynkjxdVRdOn2Z8S5IjnTUDANhW5v06iTdW1RNJfjrJ56vqtmnV65LcV1X3Jvm9JFeOMQ5M634zyceT7EvyjSS3zjMHAIBlMdc3148xbkpy02HGP53k00fYZzXJOfO8LgDAMvLN9QAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0OT4RU8AADbauObE5NqXLXoa6xrXnLjoKdBMeAGw7dR1T2eMsehprKuqMq5d9Czo5FIjAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAk7nCq6o+UFUPVdV9VXVTVb18Zt27qmpfVT1cVRfPjF8yje2rqnfO8/oAAMtk3jNedyQ5Z4xxbpKvJ3lXklTVWUkuT3J2kkuSfLSqjquq45J8JMmlSc5K8uZpWwCAbW+u8Bpj3D7GeHZ6eleSndPjy5LcOMZ4ZozxaJJ9SS6Yln1jjEfGGH+R5MZpWwCAbW8j7/H69SS3To9PS/L4zLonprEjjQMAbHvHr7dBVd2Z5BWHWXX1GOPmaZurkzyb5IaNnFxV7UmyJ0l27dq1kYcGAGi3bniNMS56vvVVdUWSX0jy+jHGmIafTHL6zGY7p7E8z/jhXntvkr1JsrKyMo60HQDAMpj3U42XJHlHkl8aY3x3ZtUtSS6vqhOq6swku5N8OclXkuyuqjOr6iVZuwH/lnnmAACwLNY947WODyc5IckdVZUkd40xrhxjPFhVn0rytaxdgnz7GOP7SVJVVyW5LclxSa4fYzw45xwAAJZC/eXVwa1tZWVlrK6uLnoaACyBqsoy/H5blnnywlXV3WOMlUPHfXM9AEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0OX7REwCAzVBVi57Cunbs2LHoKdBMeAGw7YwxNvyYVbUpx+XY4lIjAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBkrvCqqg9U1UNVdV9V3VRVL5/Gz6iq71XVvdPyOzP7nF9V91fVvqr6YC3DF60AAGyAec943ZHknDHGuUm+nuRdM+u+McY4b1qunBn/WJK3Jdk9LZfMOQcAgKUwV3iNMW4fYzw7Pb0ryc7n276qTk1y4hjjrrH2LXSfTPKGeeYAALAsNvIer19PcuvM8zOr6p6q+oOqeu00dlqSJ2a2eWIaO6yq2lNVq1W1un///g2cKgBAv3X/ZFBV3ZnkFYdZdfUY4+Zpm6uTPJvkhmndU0l2jTG+XVXnJ/lsVZ39Qic3xtibZG+SrKys+DsNAMBSWze8xhgXPd/6qroiyS8kef10+TBjjGeSPDM9vruqvpHk1UmezA9fjtw5jQEAbHvzfqrxkiTvSPJLY4zvzoyfUlXHTY9/JGs30T8yxngqydNVdeH0aca3JLl5njkAACyLdc94rePDSU5Icsf0rRB3TZ9gfF2S91TV/0vyXJIrxxgHpn1+M8knkvzNrN0TduuhBwUA2I7mCq8xxo8eYfzTST59hHWrSc6Z53UBAJaRb64HAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCbCCwCgifACAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCbCCwCgifACAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCbCCwCgifACAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCbCCwCgifACAGgivAAAmggvAIAmwgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACazB1eVfXeqrqvqu6tqtur6pXTeFXVB6tq37T+J2f2eWtV/fm0vHXeOQAALIONOOP1gTHGuWOM85J8Lsm7p/FLk+yelj1JPpYkVXVSkmuS/FSSC5JcU1U7NmAeAABb2tzhNcZ4eubpS5OM6fFlST451tyV5OVVdWqSi5PcMcY4MMY4mOSOJJfMOw8AgK3u+I04SFW9L8lbknwnyT+chk9L8vjMZk9MY0caBwDY1o7qjFdV3VlVDxxmuSxJxhhXjzFOT3JDkqs2anJVtaeqVqtqdf/+/Rt1WACAhTiqM15jjIuO8ng3JPlC1u7hejLJ6TPrdk5jTyb52UPG/8cRXndvkr1JsrKyMg63DQDAstiITzXunnl6WZKHpse3JHnL9OnGC5N8Z4zxVJLbkvxcVe2Ybqr/uWkMAGBb24h7vH6rql6T5LkkjyW5chr/QpKfT7IvyXeT/FqSjDEOVNV7k3xl2u49Y4wDGzAPAIAtbe7wGmP8oyOMjyRvP8K665NcP+9rAwAsE99cDwDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANJkrvKrqvVV1X1XdW1W3V9Urp/GfrarvTOP3VtW7Z/a5pKoerqp9VfXOeX8AAIBlMe8Zrw+MMc4dY5yX5HNJ3j2z7ktjjPOm5T1JUlXHJflIkkuTnJXkzVV11pxzAABYCnOF1xjj6ZmnL00y1tnlgiT7xhiPjDH+IsmNSS6bZw4AAMti7nu8qup9VfV4kn+aHz7j9dNV9adVdWtVnT2NnZbk8ZltnpjGAAC2vXXDq6rurKoHDrNcliRjjKvHGKcnuSHJVdNuX03yqjHG30/yoSSffTGTq6o9VbVaVav79+9/MYcAANgyjl9vgzHGRUd5rBuSfCHJNbOXIMcYX6iqj1bVyUmeTHL6zD47p7EjvfbeJHuTZGVlZb3LmAAAW9q8n2rcPfP0siQPTeOvqKqaHl8wvc63k3wlye6qOrOqXpLk8iS3zDMHAJhHVR3V8kK2/cH2cKh1z3it47eq6jVJnkvyWJIrp/FfTvLPq+rZJN9LcvkYYyR5tqquSnJbkuOSXD/GeHDOOQDAi7b26wl61LL8B7eysjJWV1cXPQ0AgHVV1d1jjJVDx31zPQBAE+EFANBEeAEANBFeAABNhBcAQBPhBQDQRHgBADQRXgAATYQXAEAT4QUA0ER4AQA0EV4AAE2EFwBAE+EFANBEeAEANBFeAABNhBcAQJMaYyx6DkelqvYneWzR82ApnJzkW4ueBLDteG/hhXjVGOOUQweXJrzgaFXV6hhjZdHzALYX7y1sBJcaAQCaCC8AgCbCi+1o76InAGxL3luYm3u8AACaOOMFANBEeMEhquqKqvrwoucBbE1V9c2qOnnR82A5CS8Ajhm1xu8+FsZ/fGwZVXVGVT1UVZ+oqq9X1Q1VdVFV/VFV/XlVXTAt/7Oq7qmqP66q10z7XlFVn6mq/zZt+/6Z4/6fmce/XFWfmB7/YlX9yXSsO6vq77T/0MCmm95bHq6qTyZ5IMl/qqrVqnqwqq6b2e6bVXVdVX21qu6vqh+bxv92Vd0+bf/xJDWzz7+sqgem5V/MvN7zvpc1/ytgCxFebDU/muS3k/zYtPyTJD+T5F8n+TdJHkry2jHGTyR5d5J/O7PveUl+NcmPJ/nVqjp9ndf6wyQXTse6Mck7NvDnALaW3Uk+OsY4O8m/mr4I9dwk/6Cqzp3Z7ltjjJ9M8rGsve8kyTVJ/nDa96Yku5Kkqs5P8mtJfirJhUneVlU/Me2z3nsZx6jjFz0BOMSjY4z7k6SqHkzy+2OMUVX3JzkjycuS/Oeq2p1kJPnrM/v+/hjjO9O+X0vyqiSPP89r7UzyX6vq1CQvSfLoRv8wwJbx2BjjrunxP66qPVn7HXhqkrOS3Det+8z0z7uTvGl6/LofPB5jfL6qDk7jP5PkpjHG/02SqvpMktcmuSXrv5dxjHLGi63mmZnHz808fy5rb5LvTfLfxxjnJPnFJH/jCPt+P3/5Pxaz35kyu/2Hknx4jPHjSX7jkHXA9vKDODoza2edXj/GODfJ53P495HZ95AXY733Mo5Rwotl87IkT06PrzjKff53Vf296YbaNx7hWG/dmOkBW9yJWYuw70z3dV56FPt8MWuXClNVlybZMY1/KckbqupvVdVLs/b+8qWNnzLbifBi2bw/yb+rqnty9P/X+M4kn0vyx0memhm/NsnvVtXdSb61kZMEtqYxxp8muSdr94v+lyR/dBS7XZfkddMlwzcl+V/Tsb6a5BNJvpzkT5J8fIxxzyZMm23EN9cDADRxxgsAoInwAgBoIrwAAJoILwCAJsILAKCJ8AIAaCK8AACaCC8AgCb/H4XZUwgmEyuhAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "[SOLVED] Crash Course in Reinforcement Learning - Part I",
      "provenance": [],
      "collapsed_sections": [
        "Gw3P1oFTOlnF"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gw3P1oFTOlnF"
      },
      "source": [
        "# Setup\n",
        "Run below cells to setup your enviroment "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S-4YPGE9O9mH"
      },
      "source": [
        "!pip install gym[Box2D] pyvirtualdisplay pyglet > /dev/null 2>&1\n",
        "!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_jMNwYlIHTep"
      },
      "source": [
        "import gym\n",
        "from gym import logger as gymlogger\n",
        "from gym.wrappers import Monitor\n",
        "gymlogger.set_level(40) #error only\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams['figure.figsize'] = (10.0, 8.0)\n",
        "import math\n",
        "import glob\n",
        "import io\n",
        "import base64\n",
        "from IPython.display import HTML\n",
        "\n",
        "from typing import List, Tuple\n",
        "\n",
        "import torch\n",
        "from torch import nn\n",
        "import torch.nn.functional as F\n",
        "from collections import deque\n",
        "\n",
        "from IPython import display as ipythondisplay\n",
        "from IPython.display import display, update_display, clear_output\n",
        "from time import sleep\n",
        "\n",
        "from pyvirtualdisplay import Display\n",
        "xdisplay = Display(visible=0, size=(1300, 900), backend=\"xvfb\")\n",
        "xdisplay.start()\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "Utility functions to enable video recording of gym environment and displaying it\n",
        "To enable video, just do \"env = wrap_env(env)\"\"\n",
        "\"\"\"\n",
        "\n",
        "class DoneWrapper(gym.Wrapper):\n",
        "\n",
        "  def step(self, action):\n",
        "    observation, reward, done, info = self.env.step(action) \n",
        "    return observation, reward, False, info\n",
        "      \n",
        "\n",
        "def show_video():\n",
        "  mp4list = glob.glob('video/*.mp4')\n",
        "  if len(mp4list) > 0:\n",
        "    mp4 = mp4list[0]\n",
        "    video = io.open(mp4, 'r+b').read()\n",
        "    encoded = base64.b64encode(video)\n",
        "    ipythondisplay.display(HTML(data='''<video alt=\"test\" autoplay \n",
        "                loop controls style=\"height: 400px;\">\n",
        "                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n",
        "             </video>'''.format(encoded.decode('ascii'))))\n",
        "  else: \n",
        "    print(\"Could not find video\")\n",
        "    \n",
        "    \n",
        "def wrap_env(env, done=True):\n",
        "  if not done:\n",
        "    env = DoneWrapper(env)\n",
        "  env = Monitor(env, './video', force=True, mode='evaluation')\n",
        "  return env\n",
        "\n",
        "\n",
        "def print_ansi(screen, display_id='42', wait=0.5):\n",
        "    clear_output(wait=True)\n",
        "    update_display(print(screen.getvalue()), display_id=display_id)\n",
        "    sleep(wait)\n",
        "\n",
        "\n",
        "def plot(img):\n",
        "  fig = plt.figure(figsize=(8,6))\n",
        "  ax = fig.add_subplot(111)\n",
        "  ax.imshow(img)\n",
        "  ax.set_xticks([])\n",
        "  ax.set_yticks([])"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k1U1clC6HTeu"
      },
      "source": [
        "# Part 1. The Agent and The Environment\n",
        "Here we are going to familiarize ourselves with basic Reinforcement Learning concepts: environments and agent. \n",
        "\n",
        "Through the whole workshop we will be using the `gym` package for our environment, here's an example of a classic control task."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "c3f7a539-0438-4c5e-8974-31dbfb2fb63c",
        "id": "g0mcOMT_HTew",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        }
      },
      "source": [
        "import gym\n",
        "\n",
        "# create the environemnt\n",
        "env = gym.make(\"CartPole-v1\")\n",
        "# reset the env and initilize it\n",
        "env.reset()\n",
        "# plot the visualisation\n",
        "plot(env.render(mode='rgb_array'))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "c80fdbd4-cfc5-41d8-8026-f20c53a312fc",
        "id": "hPOABUyaHTez",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# state/observation space\n",
        "print(env.observation_space)\n",
        "print(\"max:\", env.observation_space.high)\n",
        "print(\"min:\", env.observation_space.low)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Box(-3.4028234663852886e+38, 3.4028234663852886e+38, (4,), float32)\n",
            "max: [4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38]\n",
            "min: [-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UP9Iv5EARquC"
      },
      "source": [
        "**Question:** Can you guess what are those four numbers?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "92400979-4edf-4b5a-9044-010e8f8959d9",
        "id": "VX-JjUrGHTe2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# action space\n",
        "print(env.action_space)\n",
        "print(\"random action:\", env.action_space.sample())"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Discrete(2)\n",
            "random action: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PsOEU1pFHTe7"
      },
      "source": [
        "**Question:** Again, can you guess what are those to actions?\n",
        "\n",
        "Let's see how do we (or specifically the agent) can interact with the environment."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "22abc3e7-d23b-46e1-cba1-3949faac3623",
        "id": "IA96qLRAHTe9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# set the limit on steps taken\n",
        "max_steps = 200\n",
        "\n",
        "# create the environment again\n",
        "env = wrap_env(gym.make(\"CartPole-v1\"), done=False)\n",
        "# reset it\n",
        "env.reset()\n",
        "# plot\n",
        "env.render()\n",
        "\n",
        "# interact with the environemnt \n",
        "for i in range(max_steps):\n",
        "  \n",
        "    # sample a random action\n",
        "    action = env.action_space.sample()\n",
        "\n",
        "    # act with the sampled action\n",
        "    observation, reward, done, info = env.step(action) \n",
        "\n",
        "    # plot\n",
        "    env.render()\n",
        "  \n",
        "# close the env\n",
        "env.close()\n",
        "# visualise the interaction\n",
        "show_video()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ChCKYSc1HTfC"
      },
      "source": [
        "**Mini-exercise:** Change random action to a constant one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DeDQHLV7HTfD"
      },
      "source": [
        "## Exercise: Manual control on a more complicated environment.\n",
        "\n",
        "Try to \"manually\" solve the moon lander problem\n",
        "\n",
        "State space representation:\n",
        "```\n",
        "[x position,   \n",
        " y position,\n",
        " x velocity,\n",
        " y velocity,\n",
        " lander angle,\n",
        " angular velocity,\n",
        " ??,\n",
        " ??]\n",
        "``` \n",
        "\n",
        "Action space representation:\n",
        "```\n",
        "[no operation\n",
        "left engine,\n",
        "main (bottom) engine,\n",
        "right engine]\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "85e3c5a3-f641-478e-a238-0dd2f21ef3c4",
        "id": "3E2GXEAsHTfE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# create the environment (again)\n",
        "env = wrap_env(gym.make(\"LunarLander-v2\"))\n",
        "# reset\n",
        "observation = env.reset()\n",
        "# plot\n",
        "env.render()\n",
        "\n",
        "# interact with the environemnt \n",
        "while True:\n",
        "\n",
        "    # change the constant action here to some heuristic \n",
        "    # base on the state\n",
        "    action: int = 2\n",
        "\n",
        "    # act with the choosen action\n",
        "    observation, reward, done, info = env.step(action) \n",
        "\n",
        "    # plotting\n",
        "    env.render()\n",
        "\n",
        "    # break the loop on game end\n",
        "    if done:\n",
        "        break\n",
        "  \n",
        "env.close()\n",
        "show_video()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,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\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tUKt2EUEHTfH"
      },
      "source": [
        "## Exercise: Build a class for your Moon Lander policy.\n",
        "\n",
        "We would like to have some abstraction for our Policies, move your solution to the class skeleton below. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lvl8DVlCHTfI"
      },
      "source": [
        "class ManualPolicy:\n",
        "\n",
        "  def sample(self, obs: np.ndarray):\n",
        "      \"\"\"Pick an action based on the current state\"\"\"\n",
        "\n",
        "      # move your code here\n",
        "      action = 2\n",
        "      \n",
        "      return action"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7hFzepUhHTfM"
      },
      "source": [
        "Use your new policy class in the function below.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZkFC2btxHTfN"
      },
      "source": [
        "def visualize(env, policy):\n",
        "    \"\"\"Run the provided policy on the environment\"\"\"\n",
        "\n",
        "    env = wrap_env(env)\n",
        "    obs = env.reset()\n",
        "    done = False\n",
        "    \n",
        "    while not done:\n",
        "        action = policy.sample(obs) # ???\n",
        "        obs, reward, done, _ = env.step(action)\n",
        "        env.render()\n",
        "\n",
        "    env.close()\n",
        "    show_video()"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "459a2f83-3e14-4a8d-bc4a-21e5141bd42d",
        "id": "hTBs0mm8HTfP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "# your policy\n",
        "policy = ManualPolicy()\n",
        "\n",
        "visualize(env, policy)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQWzWkSkHTfS"
      },
      "source": [
        "## Exercise: Random Policy\n",
        "We would like to compare our policy to a *random* agent, let's implement another policy class, this time a more generic one that can work for various environments.\n",
        "\n",
        "Implement the `RandomPolicy` class using methods from the PyTorch package.\n",
        "\n",
        "**Hint:** For random sampling you can use [`torch.multinomial`](https://pytorch.org/docs/stable/torch.html#torch.multinomial) function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "si7rfe_YHTfT"
      },
      "source": [
        "import torch\n",
        "\n",
        "class RandomPolicy:\n",
        "    \"\"\"Policy that takes uniformly random actions\"\"\"\n",
        "\n",
        "    def __init__(self, action_dim: int):\n",
        "        # save action dimensionality\n",
        "        self.action_dim = action_dim\n",
        "\n",
        "    def probs(self):\n",
        "        # create a tensor with uniform probability for each action\n",
        "        # make sure that the returned type is torch.float\n",
        "\n",
        "        # ???\n",
        "        probs = [1 / self.action_dim] * self.action_dim\n",
        "        return torch.tensor(probs, dtype=torch.float32)\n",
        "\n",
        "    def sample(self, obs: np.ndarray):\n",
        "        # sample from the prepared probability vector\n",
        "        # * here you can disregard the `obs` parameterm as our random action is \n",
        "        #   independent of the observation\n",
        "        # * because the suggested sampling method returns a tensor, you may need\n",
        "        #   to use the `.item()` method on the returned tensor to get an int  \n",
        "\n",
        "        # ???\n",
        "        probs = self.probs()\n",
        "        action = torch.multinomial(probs, num_samples=1).item()\n",
        "        return action\n"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZ6V68lHHTfW"
      },
      "source": [
        "Test the Random Policy."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "24433487-2cf7-47aa-efdd-203a53d2a01a",
        "id": "ktTRga5aHTfX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        }
      },
      "source": [
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "# your policy\n",
        "policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "\n",
        "visualize(env, policy)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video alt=\"test\" autoplay \n",
              "                loop controls style=\"height: 400px;\">\n",
              "                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n",
              "             </video>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dsWfOz4_HTfa"
      },
      "source": [
        "## Exercise: Gathering Trajectories\n",
        "To compare your Policy to a Random one we need to many *episodes* to get a better picture of how they perform. Here we will gather many trajectories to later compare the performance of the models.\n",
        "\n",
        "\n",
        "Implement the missing code in the function below to gather trajectories, a single element of a trajectory should be a tuple consisting of:\n",
        "`[state, action_taken, reward, done_flag]`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9qTfnx_VHTfc"
      },
      "source": [
        "def gather_trajectories(env: gym.Env, policy, num_trajs: int = 10):\n",
        "    \"\"\"Gather `num_trajs` trajectories by interacting with the environment using the given policy.\"\"\"\n",
        "    \n",
        "    # prepare a list for the trajectories\n",
        "    history = []\n",
        "    \n",
        "    for traj_idx in range(num_trajs):\n",
        "        obs = env.reset()\n",
        "        done = False\n",
        "        current_traj = []\n",
        "        while not done:\n",
        "            \n",
        "            # sample an action from the policy\n",
        "            action = policy.sample(obs) # ???\n",
        "            # feed it into the environment\n",
        "            next_obs, reward, done, _ = env.step(action) # ???\n",
        "            \n",
        "            # save into the history\n",
        "            current_traj += [(obs, action, reward)] # ???\n",
        "\n",
        "            obs = next_obs\n",
        "        history += [current_traj]\n",
        "        \n",
        "    return history"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aC2cg6YjHTfe"
      },
      "source": [
        "env = gym.make(\"LunarLander-v2\")\n",
        "\n",
        "manual_policy = ManualPolicy()\n",
        "random_policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "\n",
        "# this may take a few seconds\n",
        "manual_history = gather_trajectories(env, manual_policy)\n",
        "random_history = gather_trajectories(env, random_policy)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0w43UBcoHTfh"
      },
      "source": [
        "## Exercise: Processing Trajectories\n",
        "\n",
        "Now that we have the episode records we can process the trajectories to get some statistics, but we need one more thing. We will compare our policies on the sum of rewards and the end of each episode, called *return*. Later we will need a return for each step of the interaction, so let's implement it right now. As a remainder, a step return is defined as:\n",
        "\n",
        "$$ R_t = \\sum_{j=t}^{T} r_j$$\n",
        "\n",
        "and the episode return with the episode trajectory $\\tau$ is simply:\n",
        "\n",
        "$$ R(\\tau) =  \\sum_{j=1}^{T} r_j $$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ewF-7AdyHTfi"
      },
      "source": [
        "def calculate_return(rewards: List[float]) -> Tuple[float, List[float]]:\n",
        "    \"\"\"Calulate episode and step returns\"\"\"\n",
        "    # calculate the sum of rewards from the episode\n",
        "    rewards = np.array(rewards)\n",
        "    episode_return = np.sum(rewards)\n",
        "    \n",
        "    # prepare a list for the step returns\n",
        "    step_returns = []\n",
        "\n",
        "    # calculate discounted return for each step\n",
        "    # hint: it's easier to go backwards\n",
        "    step_returns = [rewards[-1]]\n",
        "    for reward in reversed(rewards[:-1]):\n",
        "        last_return = step_returns[-1]\n",
        "        step_returns += [reward + last_return]\n",
        "    \n",
        "    step_returns.reverse()\n",
        "\n",
        "    return episode_return, step_returns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y4umKZrZHTfl"
      },
      "source": [
        "With that function ready we can use it to process our history. Implement the `process_trajectories` function, don't forget to use the `calculate_return` function that you've just implemented."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zwm1U_a2HTfo"
      },
      "source": [
        "def process_trajectories(history: List):\n",
        "    \"\"\"Process gathered trajectories into tensors and calculate returns\"\"\"\n",
        "    # prepare containers for each element\n",
        "    obs_array = []\n",
        "    action_array = []\n",
        "    return_array = []\n",
        "    episode_returns = []\n",
        "    \n",
        "    # loop over the whole history\n",
        "    rewards = []\n",
        "    for traj_idx, traj in enumerate(history):\n",
        "        # unpack the elements\n",
        "        traj_obs, traj_actions, traj_rewards = list(zip(*traj))\n",
        "\n",
        "        # process the episode - calculate episode and step returns\n",
        "        # ???\n",
        "        episode_return, step_returns = calculate_return(traj_rewards)\n",
        "        \n",
        "        episode_returns += [episode_return]\n",
        "        obs_array += traj_obs\n",
        "        action_array += traj_actions\n",
        "        return_array += step_returns\n",
        "\n",
        "    # cast out data to tensors (will be useful later)     \n",
        "    obs_array = torch.tensor(obs_array, dtype=torch.float32)\n",
        "    action_array = torch.tensor(action_array, dtype=torch.float32)\n",
        "    return_array = torch.tensor(return_array, dtype=torch.float32)\n",
        "    episode_returns = torch.tensor(episode_returns, dtype=torch.float32)\n",
        "    \n",
        "    return obs_array, action_array, return_array, episode_returns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QNB4QJeqHTft"
      },
      "source": [
        "With all that we can compare your policy to the random one, will plot here the returns for each consecutive episode."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "465f5aa8-5893-416a-ca29-ba8efd41d413",
        "id": "9qBFVtZZHTfu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        }
      },
      "source": [
        "manual_stats = process_trajectories(manual_history)\n",
        "random_stats = process_trajectories(random_history)\n",
        "\n",
        "manual_returns = manual_stats[-1]\n",
        "random_returns = random_stats[-1]\n",
        "\n",
        "plt.boxplot([manual_returns.numpy(), random_returns.numpy()], labels=['manual', 'random'], sym=\"\")\n",
        "\n",
        "print(f\"Average manual policy episode return: {manual_returns.mean():.3f}\")\n",
        "print(f\"Average random policy episode return: {random_returns.mean():.3f}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average manual policy episode return: -731.538\n",
            "Average random policy episode return: -147.556\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KwtjJq6nHTfz"
      },
      "source": [
        "## Free Play\n",
        "If you want to try to write a better policy here's the whole code in one place."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "outputId": "e35eb771-6c83-4e65-9afc-d76540c406a6",
        "id": "dUSV3iQ4HTf0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        }
      },
      "source": [
        "class ManualPolicy:\n",
        "\n",
        "  def sample(self, obs: np.ndarray):\n",
        "      \"\"\"Pick an action based on the current state\"\"\"\n",
        "\n",
        "      # your code here\n",
        "      action = 0\n",
        "      \n",
        "      return action\n",
        "\n",
        "# moon lander\n",
        "env = gym.make(\"LunarLander-v2\")\n",
        "\n",
        "# random policy\n",
        "policy = RandomPolicy(action_dim=env.action_space.n)\n",
        "# your policy\n",
        "policy = ManualPolicy()\n",
        "\n",
        "# gather trajectories\n",
        "manual_history = gather_trajectories(env, manual_policy)\n",
        "random_history = gather_trajectories(env, random_policy)\n",
        "\n",
        "# process trajectories\n",
        "manual_stats = process_trajectories(manual_history)\n",
        "random_stats = process_trajectories(random_history)\n",
        "\n",
        "# get episode returns\n",
        "manual_returns = manual_stats[-1]\n",
        "random_returns = random_stats[-1]\n",
        "\n",
        "# visualize\n",
        "plt.boxplot([manual_returns.numpy(), random_returns.numpy()], labels=['manual', 'random'], sym=\"\")\n",
        "\n",
        "print(f\"Average manual policy episode return: {manual_returns.mean():.3f}\")\n",
        "print(f\"Average random policy episode return: {random_returns.mean():.3f}\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average manual policy episode return: -965.175\n",
            "Average random policy episode return: -178.926\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmUAAAHVCAYAAACwrYzPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAYd0lEQVR4nO3df7Dld13f8de72Ya2dEI2oobmh6TD\nWhqEKlwT7Ig/MEDilAYoavAPgnVMa6FTq44GM2MSnWmV1jq1IDM7kBE6dgJaKDsFjAmjxR8N5C4o\nsEBkBTUbUYO74lBHGMi7f9zvjnfCbjbk3rP3fXcfj5kze87n+z3ffW9m5+wz3+8551Z3BwCAnfW3\ndnoAAABEGQDACKIMAGAAUQYAMIAoAwAYQJQBAAwwLsqq6uqqureqDlfVjTs9DwDA6VCTvqesqs5J\n8ntJnpPkSJJ7krykuz+8o4MBAKzYtDNlVyQ53N0f7+7PJbk9ybU7PBMAwMrt2ekBHuKiJPdtenwk\nyZUP3amqbkhyQ5I89rGPfcaTn/zk0zMdAMAWHDx48FPd/eUn2jYtyh6R7t6fZH+SrK2t9fr6+g5P\nBABwalX1hyfbNu3y5f1JLtn0+OJlDQDgjDYtyu5Jsq+qLquqc5Ncl+TADs8EALByoy5fdvfnq+oV\nSe5Ick6S27r70A6PBQCwcqOiLEm6+x1J3rHTcwAAnE7TLl8CAJyVRBkAwACiDABgAFEGADCAKAMA\nGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMsGenBwCAiapqJcft\n7pUcl91PlAHACTzSeKoqocW2cPkSAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDA\nAKIMAGAAUQYAMIAfswTAWeOCCy7IsWPHtv242/1zMvfu3ZujR49u6zGZT5QBcNY4duzYrvg5lav6\nYejM5vIlAMAAogwAYABRBgAwgCgDABhAlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAAvtEfgLNG33xe\ncsvjdnqMU+qbz9vpEdgBogyAs0bd+pe75scs9S07PQWnm8uXAAADiDIAgAFEGQDAAKIMAGAAUQYA\nMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGCAlUVZVf2nqvpoVX2gqt5aVedv2vbK\nqjpcVfdW1fM2rV+9rB2uqhtXNRsAwDSrPFN2Z5Kv6e6nJfm9JK9Mkqq6PMl1SZ6S5OokP19V51TV\nOUlek+SaJJcnecmyLwDAGW9lUdbdv9rdn18e3p3k4uX+tUlu7+7PdvcnkhxOcsVyO9zdH+/uzyW5\nfdkXAOCMd7reU/Yvk7xzuX9Rkvs2bTuyrJ1s/YtU1Q1VtV5V6w888MAKxgUAOL32bOXJVXVXkgtP\nsOmm7n7bss9NST6f5Be38ntt1t37k+xPkrW1td6u4wIA7JQtRVl3X/Vw26vqZUn+WZJv6+7j8XR/\nkks27XbxspaHWQcAOKOt8tOXVyf5kST/vLv/atOmA0muq6rHVNVlSfYleW+Se5Lsq6rLqurcbHwY\n4MCq5gMAmGRLZ8pO4dVJHpPkzqpKkru7+19396GqenOSD2fjsubLu/sLSVJVr0hyR5JzktzW3YdW\nOB8AwBj1N1cVd6e1tbVeX1/f6TEA2AWqKrvh373dMidfuqo62N1rJ9rmG/0BAAYQZQAAA4gyAIAB\nRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABggD07PQAAnE5V\ntdMjnNLevXt3egR2gCgD4KzR3dt+zKpayXE5+7h8CQAwgCgDABhAlAEADCDKAAAGEGUAAAOIMgCA\nAUQZAMAAogwAYABRBgAwgCgDABhAlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAAogwAYABRBgAwgCgD\nABhAlAEADCDKAAAGEGUAAAPs2ekBAGCiqlrJvt39aMbhLCDKAOAExBOnm8uXAAADiDIAgAFEGQDA\nAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYAMMDKo6yqfqiq\nuqoevzyuqvq5qjpcVR+oqqdv2vf6qvrYcrt+1bMBAEyxZ5UHr6pLkjw3yR9tWr4myb7ldmWS1ya5\nsqouSHJzkrUkneRgVR3o7mOrnBEAYIJVnyn72SQ/ko3IOu7aJG/sDXcnOb+qnpDkeUnu7O6jS4jd\nmeTqFc8HADDCyqKsqq5Ncn93/+5DNl2U5L5Nj48saydbP9Gxb6iq9apaf+CBB7ZxagCAnbGly5dV\ndVeSC0+w6aYkP5aNS5fbrrv3J9mfJGtra32K3QEAxttSlHX3VSdar6qnJrksye9WVZJcnOR9VXVF\nkvuTXLJp94uXtfuTfMtD1n99K/MBAOwWK7l82d0f7O6v6O4ndvcTs3Ep8und/SdJDiR56fIpzGcm\n+XR3fzLJHUmeW1V7q2pvNs6y3bGK+QAAplnppy9P4h1Jvj3J4SR/leR7kqS7j1bVTya5Z9nvJ7r7\n6A7MBwBw2p2WKFvOlh2/30lefpL9bkty2+mYCQBgEt/oDwAwgCgDABhAlAEADCDKAAAGEGUAAAOI\nMgCAAUQZAMAAogwAYABRBgAwgCgDABhAlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAAogwAYABRBgAw\ngCgDABhAlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAAogwAYABRBgAwgCgDABhgz04PAFtVVSs5bnev\n5LgAcCKijF3vkcZTVQktAMZy+RIAYABRBgAwgCgDABhAlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAA\nvjyWkS644IIcO3Zs24+73d/+v3fv3hw9enRbjwnA2UmUMdKxY8d2xbfvr+pHPAFw9nH5EgBgAFEG\nADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoAAAZY\naZRV1b+tqo9W1aGqetWm9VdW1eGqureqnrdp/epl7XBV3bjK2QAAJtmzqgNX1bcmuTbJP+nuz1bV\nVyzrlye5LslTkvyDJHdV1VcvT3tNkuckOZLknqo60N0fXtWMAABTrCzKknx/kp/q7s8mSXf/2bJ+\nbZLbl/VPVNXhJFcs2w5398eTpKpuX/YVZQDAGW+Vly+/Osmzquo9VfV/qurrl/WLkty3ab8jy9rJ\n1r9IVd1QVetVtf7AAw+sYHQAgNNrS2fKququJBeeYNNNy7EvSPLMJF+f5M1V9Q+38vsd1937k+xP\nkrW1td6OYwIA7KQtRVl3X3WybVX1/Une0t2d5L1V9WCSxye5P8klm3a9eFnLw6wDAJzRVnn58n8l\n+dYkWd7If26STyU5kOS6qnpMVV2WZF+S9ya5J8m+qrqsqs7NxocBDqxwPgCAMVb5Rv/bktxWVR9K\n8rkk1y9nzQ5V1Zuz8Qb+zyd5eXd/IUmq6hVJ7khyTpLbuvvQCucDABijNjpp91pbW+v19fWdHoNt\nVlXZDX83d8ucAMxQVQe7e+1E23yjPwDAAKIMAGAAUQYAMIAoAwAYYJWfvoRHrW8+L7nlcTs9xin1\nzeft9AgAnCFEGSPVrX+5Kz7VWFXpW3Z6CgDOBC5fAgAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABg\nAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoA\nAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACi\nDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAM\nIMoAAAYQZQAAA4gyAIABRBkAwAAri7Kq+tqquruqfqeq1qvqimW9qurnqupwVX2gqp6+6TnXV9XH\nltv1q5oNAGCaPSs89quS3Nrd76yqb18ef0uSa5LsW25XJnltkiur6oIkNydZS9JJDlbVge4+tsIZ\nAQBGWOXly05y3nL/cUn+eLl/bZI39oa7k5xfVU9I8rwkd3b30SXE7kxy9QrnAwAYY5Vnyn4gyR1V\n9Z+zEX//dFm/KMl9m/Y7sqydbP2LVNUNSW5IkksvvXR7pwYA2AFbirKquivJhSfYdFOSb0vy77v7\nf1bVdyZ5fZKrtvL7Hdfd+5PsT5K1tbXejmMCAOykLUVZd580sqrqjUn+3fLwl5K8brl/f5JLNu16\n8bJ2fzbec7Z5/de3Mh8AwG6xyveU/XGSb17uPzvJx5b7B5K8dPkU5jOTfLq7P5nkjiTPraq9VbU3\nyXOXNQCAM94q31P2fUn+a1XtSfLXWd4DluQdSb49yeEkf5Xke5Kku49W1U8muWfZ7ye6++gK5wMA\nGGNlUdbdv5nkGSdY7yQvP8lzbkty26pmAgCYyjf6AwAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABg\nAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoA\nAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACi\nDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAM\nIMoAAAYQZQAAA4gyAIABRBkAwACiDABgAFEGADCAKAMAGECUAQAMIMoAAAYQZQAAA2wpyqrqO6rq\nUFU9WFVrD9n2yqo6XFX3VtXzNq1fvawdrqobN61fVlXvWdbfVFXnbmU2AIDdZKtnyj6U5EVJ3r15\nsaouT3JdkqckuTrJz1fVOVV1TpLXJLkmyeVJXrLsmyQ/neRnu/tJSY4l+d4tzgYAsGtsKcq6+yPd\nfe8JNl2b5Pbu/mx3fyLJ4SRXLLfD3f3x7v5cktuTXFtVleTZSX55ef4bkrxgK7MBAOwmq3pP2UVJ\n7tv0+MiydrL1L0vyF939+Yesn1BV3VBV61W1/sADD2zr4AAAO2HPqXaoqruSXHiCTTd199u2f6RT\n6+79SfYnydraWu/EDAAA2+mUUdbdVz2K496f5JJNjy9e1nKS9T9Pcn5V7VnOlm3en7PUxlXt2fbu\n3bvTIwBwhljV5csDSa6rqsdU1WVJ9iV5b5J7kuxbPml5bjY+DHCguzvJryV58fL865PsyFk4Zuju\nbb+t4rhHjx7d4f9SAJwptvqVGC+sqiNJviHJ26vqjiTp7kNJ3pzkw0l+JcnLu/sLy1mwVyS5I8lH\nkrx52TdJfjTJD1bV4Wy8x+z1W5kNAGA3qeNnEHartbW1Xl9f3+kx2AWqKrv97zsAu1tVHezutRNt\n843+AAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIM\nAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwg\nygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDA\nAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQB\nAAwgygAABhBlAAADiDIAgAFEGQDAAFuKsqr6jqo6VFUPVtXapvXnVNXBqvrg8uuzN217xrJ+uKp+\nrqpqWb+gqu6sqo8tv+7dymwAALvJVs+UfSjJi5K8+yHrn0ry/O5+apLrk/z3Tdtem+T7kuxbblcv\n6zcmeVd370vyruUxAMBZYUtR1t0f6e57T7D+/u7+4+XhoSR/t6oeU1VPSHJed9/d3Z3kjUlesOx3\nbZI3LPffsGkdAOCMdzreU/Yvkryvuz+b5KIkRzZtO7KsJclXdvcnl/t/kuQrT8NsAAAj7DnVDlV1\nV5ILT7Dppu5+2yme+5QkP53kuV/KUN3dVdUPc9wbktyQJJdeeumXcmgAgJFOGWXdfdWjOXBVXZzk\nrUle2t2/vyzfn+TiTbtdvKwlyZ9W1RO6+5PLZc4/e5iZ9ifZnyRra2snjTcAgN1iJZcvq+r8JG9P\ncmN3/9bx9eXy5F9W1TOXT12+NMnxs20HsvGhgCy/PuxZOACAM8lWvxLjhVV1JMk3JHl7Vd2xbHpF\nkicl+fGq+p3l9hXLtn+T5HVJDif5/STvXNZ/KslzqupjSa5aHgMAnBVq40OQu9fa2lqvr6/v9Bjs\nAlWV3f73HYDdraoOdvfaibb5Rn8AgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAAD\niDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYA\nMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBl\nAAADiDIAgAFEGQDAAKIMAGAAUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAFEGQDAAKIMAGAA\nUQYAMIAoAwAYQJQBAAwgygAABhBlAAADiDIAgAH27PQAsFVVtZJ9u/vRjAMAj4ooY9cTTwCcCbZ0\n+bKqvqOqDlXVg1W1doLtl1bVZ6rqhzetXV1V91bV4aq6cdP6ZVX1nmX9TVV17lZmAwDYTbb6nrIP\nJXlRknefZPt/SfLO4w+q6pwkr0lyTZLLk7ykqi5fNv90kp/t7iclOZbke7c4GwDArrGlKOvuj3T3\nvSfaVlUvSPKJJIc2LV+R5HB3f7y7P5fk9iTX1sYbfZ6d5JeX/d6Q5AVbmQ0AYDdZyacvq+rvJ/nR\nJLc+ZNNFSe7b9PjIsvZlSf6iuz//kHUAgLPCKd/oX1V3JbnwBJtu6u63neRpt2TjUuRnvpRPuz1S\nVXVDkhuS5NJLL9324wMAnG6njLLuvupRHPfKJC+uqlclOT/Jg1X110kOJrlk034XJ7k/yZ8nOb+q\n9ixny46vn2ym/Un2J8na2pqP3gEAu95KvhKju591/H5V3ZLkM9396qrak2RfVV2Wjei6Lsl3d3dX\n1a8leXE23md2fZKTnYUDADjjbPUrMV5YVUeSfEOSt1fVHQ+3/3IW7BVJ7kjykSRv7u7jHwT40SQ/\nWFWHs/Ees9dvZTYAgN2kdvsXb66trfX6+vpOjwEAcEpVdbC7v+i7XRM/+xIAYARRBgAwgCgDABhA\nlAEADCDKAAAGEGUAAAOIMgCAAUQZAMAAogwAYIBd/43+VfVAkj/c6TnYFR6f5FM7PQRwxvHawpfi\nq7r7y0+0YddHGTxSVbV+sh9tAfBoeW1hu7h8CQAwgCgDABhAlHE22b/TAwBnJK8tbAvvKQMAGMCZ\nMgCAAUQZAMAAogweoap6WVW9eqfnAGaqqj+oqsfv9BzsXqIMgLNebfBvIjvKX0DGq6onVtVHq+oX\nqur3quoXq+qqqvqtqvpYVV2x3P5vVb2/qn67qv7R8tyXVdVbqupXln1ftem4n9l0/8VV9QvL/edX\n1XuWY91VVV952v/QwMotry33VtUbk3woyeurar2qDlXVrZv2+4OqurWq3ldVH6yqJy/rX1ZVv7rs\n/7oktek5P1hVH1puP7Dp93vY17LT/J+AYUQZu8WTkvxMkicvt+9O8o1JfjjJjyX5aJJndffXJfnx\nJP9h03O/Nsl3JXlqku+qqktO8Xv9ZpJnLse6PcmPbOOfA5hlX5Kf7+6nJPmh5Zv5n5bkm6vqaZv2\n+1R3Pz3Ja7PxupMkNyf5zeW5b01yaZJU1TOSfE+SK5M8M8n3VdXXLc851WsZZ7E9Oz0APEKf6O4P\nJklVHUryru7uqvpgkicmeVySN1TVviSd5G9veu67uvvTy3M/nOSrktz3ML/XxUneVFVPSHJukk9s\n9x8GGOMPu/vu5f53VtUN2fi38QlJLk/ygWXbW5ZfDyZ50XL/m47f7+63V9WxZf0bk7y1u/9fklTV\nW5I8K8mBnPq1jLOYM2XsFp/ddP/BTY8fzMYL6E8m+bXu/pokz0/yd07y3C/kb/5nZPOX9G3e/78l\neXV3PzXJv3rINuDMcjycLsvG2apv6+6nJXl7Tvw6svk15NE41WsZZzFRxpnicUnuX+6/7BE+50+r\n6h8vb+594UmOdf32jAcMd142Au3Ty/tIr3kEz3l3Ni4/pqquSbJ3Wf+NJC+oqr9XVY/NxuvLb2z/\nyJxpRBlnilcl+Y9V9f488v/bvDHJ/07y20k+uWn9liS/VFUHk3xqO4cEZuru303y/my8P/V/JPmt\nR/C0W5N803IZ8kVJ/mg51vuS/EKS9yZ5T5LXdff7VzA2Zxg/ZgkAYABnygAABhBlAAADiDIAgAFE\nGQDAAKIMAGAAUQYAMIAoAwAY4P8DtkBZofnY15MAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}